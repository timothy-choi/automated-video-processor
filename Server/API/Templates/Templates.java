package api.templates;

import com.amazonaws.services.dynamodbv2.datamodeling.*;

import api.templates.PrimaryKey;

import org.springframework.data.annotation.Id;

import javafx.util.Pair;

import java.util.*;


@DynamoDBTable(tableName = "Template")
public class Templates {
    @Id
    private PrimaryKey key;

    @DynamoDBAttribute(attributeName = "name")
    private String name;

    @DynamoDBAttribute(attributeName = "Slides")
    private List<String> slides; 

    @DynamoDBAttribute(attributeName = "partitions")
    private List<Int> partitions; 

    @DynamoDBAttribute(attributeName = "Text")
    private List<String> Text;

    @DynamoDBAttribute(attributeName = "SlideDuration")
    private List<Int> SlideDuration;

    @DynamoDBAttribute(attributeName = "Shapes")
    private List<String> Shapes;

    @DynamoDBAttribute(attributeName = "Images") 
    private List<String> Images;

    @DynamoDHashKey(attributeName = "UserId")
    @DynamoDBAutoGeneratedKey
    public String getUserId() {
        return key.getUserId();
    }

    public void setUserId() {
        if (key == null) {
            key = new PrimaryKey();
        }
        UUID newUUID = UUID.randomUUID();
        key.setUserId(newUUID.toString());
    }

    @DynamoDBRangeKey(attributeName = "TemplateId")
    @DynamoDBAutoGeneratedKey
    public String getTemplateId() {
        return key.getTemplateId();
    }

    public void setTemplateId(String newId) {
        if (key == null) {
            key = new PrimaryKey();
        }
        key.setTemplateId(newId);
    }

    public String getName() {
        return name;
    }

    public void setName(String templateName) {
        name = TemplateName;
    }

    public List<String> getSlides() {
        return slides;
    }

    public void createSlides() {
        slides = new ArrayList<String>();
    }

    public void addSlide(String slideId) {
        slides.add(slideId);
    }

    public void deleteSlide(String slideId) {
        int deleted = -1;
        for (int i = 0; i < this.slides.size(); ++i) {
            if (this.slides.get(i) == slideId) {
                deleted = i;
            }
        }
        this.slides.remove(Integer.valueOf(deleted));
    }

    public List<Int> getPartitions() {
        return partitions;
    }

    public void createPartitions() {
        partitions = new ArrayList<Int>();
    }

    public void addPartition(Int slideNumber) {
        partitions.add(slideNumber);
    }

    public void deletePartition(String slideNum) {
        int deleted = -1;
        for (int i = 0; i < this.partitions.size(); ++i) {
            if (this.partitions.get(i) == slideNum) {
                deleted = i;
            }
        }
        this.partitions.remove(Integer.valueOf(deleted));
    }

    public List<String> getText() {
        return Text;
    }

    public void createText() {
        text = new ArrayList<String>();
    }

    public void addText(String data) {
        text.add(data);
    }

    public void deleteText(int index) {
        this.text.remove(Integer.valueOf(index));
    }

    public List<Int> getSlideDuration() {
        return SlideDuration;
    }

    public void createSlideDuration() {
        SlideDuration = new ArrayList<Int>();
    }

    public void addSlideDuration(Int time) {
        SlideDuration.add(time);
    }

    public void deleteSlideDuration(int index) {
        this.SlideDuration.remove(Integer.valueOf(index));
    }

    public List<String> getShapes() {
        return Shapes;
    }

    public void createShapes() {
        Shapes = new ArrayList<String>();
    }

    public void addShape(String shapeId) {
        ShapeId.add(shapeId);
    }

    public void deleteShapes(int index) {
        this.Shapes.remove(Integer.valueOf(index));
    }

    public List<String> getImages() {
        return Images;
    }

    public void createImages() {
        Images = new ArrayList<String>();
    }

    public void addImage(String imageUrl) {
        Images.add(imageUrl);
    }

    public void deleteImages(int index) {
        this.Images.remove(Integer.valueOf(index));
    }
}